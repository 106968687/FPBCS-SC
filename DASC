pragma solidity ^0.4.16;

contract DASC {
    bool public status;
    address public owner;    
    uint public numberOfSalesManagers;
    mapping (address => uint) public salesManagerId;
    SalesManager[] public salesManagers;
	string public contractName;
       
    event SalesManagerAdded (address SalesManagerAddress, string SalesManagerDelegate, string SalesManagerNote);
    event SalesManagerRemoved(address SalesManagerAddress);
    event StatusChanged(string Status);
    
    struct SalesManager {
        address salesManager;
	    string delegate;
	    string note;
	    uint salesManagerSince;
    }
    
	modifier onlyOwner {
        require (msg.sender == owner);
	    _;
    }

    constructor (string enterContractName) public {
        owner = msg.sender;
	    status = true;
	    addSalesManager (0,"","");
	    contractName = enterContractName;
        numberOfSalesManagers = 0;	    	
    }
	
    function changeStatus (bool deactivate) onlyOwner public {
        if (deactivate)
	    {status = false;}
	    emit StatusChanged ("Smart Contract Deactivated");
    }
		
    function addSalesManager (address salesManagerAddress, string salesManagerDelegate, string salesManagerNote) onlyOwner public {
        require (status = true);
	    uint id = salesManagerId[salesManagerAddress];
	    if (id == 0) {
	      salesManagerId[salesManagerAddress] = salesManagers.length;
	      id = salesManagers.length++;
	    }
	    salesManagers[id] = SalesManager ({salesManager: salesManagerAddress, salesManagerSince: now, delegate: salesManagerDelegate, note: salesManagerNote});
        emit SalesManagerAdded (salesManagerAddress, salesManagerDelegate, salesManagerNote);
	    numberOfSalesManagers++;
    }
	
    function removeSalesManager (address salesManagerAddress) onlyOwner public {
        require (salesManagerId[salesManagerAddress] != 0);
	    for (uint i = salesManagerId[salesManagerAddress]; i < salesManagers.length-1; i++){
	      salesManagers[i] = salesManagers[i+1];
	    }
	    delete salesManagers[salesManagers.length-1];
	    salesManagers.length--;
	    emit SalesManagerRemoved(salesManagerAddress);
	    numberOfSalesManagers--;
    }
}